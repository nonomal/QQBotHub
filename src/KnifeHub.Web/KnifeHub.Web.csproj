<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFrameworks>net6.0;net7.0;net8.0</TargetFrameworks>
    <!-- 注意: 当 OpenApiGenerateDocuments 为 true 时, dotnet build 会尝试临时启动 Program, 未知原因 -->
    <!-- 于是启动过程 PluginCore 尝试启用插件, 而 dotnet build 不指定 framework 则会尝试多个目标框架 -->
    <!-- 于是插件 framework 与当前启动的 framework 不符, 则导致 Error 失败, 发现此时并不会框架向下兼容 -->
    <!-- 因此, 需要本地调试时, 注释多目标框架, 启用下方单目标 -->
    <!--<TargetFrameworks>net8.0</TargetFrameworks>-->
    <OpenApiGenerateDocuments>false</OpenApiGenerateDocuments>
    <OpenApiGenerateDocumentsOnBuild>false</OpenApiGenerateDocumentsOnBuild>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <DockerComposeProjectPath>..\..\docker-compose.dcproj</DockerComposeProjectPath>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>..\..</DockerfileContext>
  </PropertyGroup>

  <PropertyGroup>
    <Version>1.6.6</Version>
    <FileVersion>1.6.6.0</FileVersion>
    <AssemblyVersion>1.6.6.0</AssemblyVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.ApiDescription.Server" Version="6.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.14.0" />
    <PackageReference Include="Sentry.AspNetCore" Version="3.26.2" />
    <PackageReference Include="Serilog.AspNetCore" Version="8.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.2.3" />
  </ItemGroup>

  <!-- 方便开发debug,与发布到nuget -->
  <ItemGroup Condition="'$(Configuration)' == 'Release'">
    <PackageReference Include="PluginCore.AspNetCore" Version="1.4.2" />
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)' == 'Debug'">
    <ProjectReference Include="..\PluginCore\src\PluginCore.AspNetCore\PluginCore.AspNetCore.csproj" />
  </ItemGroup>

  <!-- 方便开发debug,与发布到nuget -->
  <ItemGroup Condition="'$(Configuration)' == 'Release'">
    <PackageReference Include="KnifeHub.Sdk" Version="1.1.1" />
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)' == 'Debug'">
    <ProjectReference Include="..\..\src\KnifeHub.Sdk\KnifeHub.Sdk.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="wwwroot\**\*">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- 生成注释xml -->
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net6.0|AnyCPU'">
    <DocumentationFile>bin\Release\net6.0\KnifeHub.Web.xml</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net6.0|AnyCPU'">
    <DocumentationFile>bin\Debug\net6.0\KnifeHub.Web.xml</DocumentationFile>
  </PropertyGroup>

  <!-- Get Build Stamp -->
  <Target Name="GetBuildStamp" BeforeTargets="GenerateBuildStamp" Condition="'$(BuildHash)' == ''">
    <PropertyGroup>
      <BuildStampFile>$(IntermediateOutputPath)BuildStamp</BuildStampFile>
    </PropertyGroup>

    <PropertyGroup>
      <BuildDate>$([System.DateTime]::Now.ToString(s))</BuildDate>
    </PropertyGroup>

    <!-- Git Branch -->
    <Exec Command="git -C $(ProjectDir) rev-parse --abbrev-ref HEAD &gt; $(BuildStampFile)" />

    <!-- Git Commit Hash -->
    <Exec Command="git -C $(ProjectDir) rev-parse HEAD &gt;&gt; $(BuildStampFile)" />

    <!--Build Date -->
    <Exec Command="echo $(BuildDate) &gt;&gt; $(BuildStampFile)" />

    <ReadLinesFromFile File="$(BuildStampFile)">
      <Output TaskParameter="Lines" ItemName="Stamp" />
    </ReadLinesFromFile>

    <PropertyGroup>
      <BuildStamp>@(Stamp)</BuildStamp>
    </PropertyGroup>
  </Target>

  <!-- Generate Build Stamp -->
  <Target Name="GenerateBuildStamp" BeforeTargets="CoreCompile">
    <PropertyGroup>
      <CustomAssemblyInfoFile>$(IntermediateOutputPath)CustomAssemblyInfo.cs</CustomAssemblyInfoFile>
    </PropertyGroup>

    <ItemGroup>
      <Compile Include="$(CustomAssemblyInfoFile)" />
    </ItemGroup>

    <ItemGroup>
      <AssemblyAttributes Include="AssemblyMetadata">
        <_Parameter1>BuildStamp</_Parameter1>
        <_Parameter2>$(BuildStamp)</_Parameter2>
      </AssemblyAttributes>
    </ItemGroup>

    <WriteCodeFragment Language="C#" OutputFile="$(CustomAssemblyInfoFile)" AssemblyAttributes="@(AssemblyAttributes)" />
  </Target>

</Project>
