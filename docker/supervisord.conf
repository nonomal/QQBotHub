; Sample supervisor config file.
;
; For more information on the config file, please see:
; http://supervisord.org/configuration.html
;
; Notes:
;  - Shell expansion ("~" or "$HOME") is not supported.  Environment
;    variables can be expanded using this syntax: "%(ENV_HOME)s".
;  - Comments must have a leading space: "a=b ;comment" not "a=b;comment".

[unix_http_server]
file=/var/run/supervisor.sock   ; (the path to the socket file)
;chmod=0700                 ; socket file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

;[inet_http_server]         ; inet (TCP) server disabled by default
;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

[supervisord]
nodaemon=true               ; (start in foreground if true;default false)
logfile=/var/log/supervisord/supervisord.log
pidfile=/var/run/supervisord/supervisord.pid
childlogdir=/var/log/supervisord/
logfile_maxbytes=50MB                           ; maximum size of logfile before rotation
logfile_backups=10                              ; number of backed up logfiles
loglevel=error

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket
;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
;username=chris              ; should be same as http_username if set
;password=123                ; should be same as http_password if set
;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history  ; use readline history if available

; The below sample program section shows all possible program subsection values,
; create one or more 'real' program: sections to be able to control them under
; supervisor.

[program:knifehub]
directory=/app
command=/usr/bin/dotnet KnifeHub.Web.dll --urls=http://*:54321
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 10     ; 启动失败自动重试次数，默认是 3
user = root          ; 用哪个用户启动
stderr_logfile=/tmp/knifehub_stderr.log
stdout_logfile=/tmp/knifehub_stdout.log
user=root

[program:filebrowser]
directory=/app-filebrowser
command=/usr/local/bin/filebrowser -r /
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 10     ; 启动失败自动重试次数，默认是 3
user = root          ; 用哪个用户启动
stderr_logfile=/tmp/filebrowser_stderr.log
stdout_logfile=/tmp/filebrowser_stdout.log
user=root

# 注意: nginx 无需作为服务, 采用包安装方式后, 就自动加入了服务并自动完成启动, 只需修改默认配置即可
# 奇怪, 发现有时候又会启动出问题, 于是又加上
[program:nginx]
directory=/app-nginx
# -g "daemon off;" 以前台模式 运行, 而不是后台(守护进程)模式
command=/usr/sbin/nginx -c /etc/nginx/nginx.conf -g "daemon off;"
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 10     ; 启动失败自动重试次数，默认是 3
user = root          ; 用哪个用户启动
stderr_logfile=/tmp/nginx_stderr.log
stdout_logfile=/tmp/nginx_stdout.log
user=root